apply plugin: "java-library"
apply plugin: "maven-publish"
apply plugin: "signing"

compileJava.options.compilerArgs.add '-parameters'
compileTestJava.options.compilerArgs.add '-parameters'

dependencies {
    api "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    api "com.fasterxml.jackson.module:jackson-module-parameter-names:$jacksonVersion"

    api "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:$javaxPersistenceVersion"
    api "org.hibernate:hibernate-core:$hibernateVersion"
    api "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
    api "com.vladmihalcea:hibernate-types-52:$hibernateTypesVersion"
    api "org.glassfish.web:javax.el:$javaxELVersion"
    api "org.jboss.logging:jboss-logging-annotations:$jbossLoggingAnnotationsVersion"

    api "org.jboss.spec.javax.annotation:jboss-annotations-api_1.3_spec:$javaxAnnotationsVersion"
    api "org.jboss.spec.javax.ws.rs:jboss-jaxrs-api_2.1_spec:$jaxrsSpecVersion"

    api "org.keycloak:keycloak-core:$keycloakVersion"
    api "org.keycloak:keycloak-core:$keycloakVersion:sources"

    api "org.geotools:gt-main:$geotoolsVersion"
    api "com.jayway.jsonpath:json-path:$jaywayJsonPathVersion"
    api "org.jeasy:easy-rules-core:$easyRulesVersion"
    api "org.mnode.ical4j:ical4j:$ical4jVersion"
    api "org.reflections:reflections:$reflectionsVersion"
    api "com.google.guava:guava:$guavaVersion"

    api "io.swagger.core.v3:swagger-annotations:$swaggerVersion"

    // Custom build until PR is merged from https://github.com/richturner/mbknor-jackson-jsonSchema - resolved by jitpack
    api "com.github.richturner:mbknor-jackson-jsonSchema:v1.0.40-SNAPSHOT"
    //api "com.kjetland:mbknor-jackson-jsonschema_2.12:1.0.39"
    api "org.scala-lang:scala-library:2.12.10"
    api "io.github.classgraph:classgraph:4.8.21"
}

jar {
    from sourceSets.main.allJava
    archivesBaseName = "openremote-${project.name}"
}

javadoc {
    failOnError = false
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            group = "io.openremote"
            artifactId = "openremote-${project.name}"
            from components.java
            pom {
                name = 'OpenRemote Model'
                description = 'Provides core model classes used within OpenRemote; add maven {url "https://jitpack.io"} to resolve all dependencies'
                url = 'https://github.com/openremote/openremote'
                licenses {
                    license {
                        name = 'GNU Affero General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/agpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'developers'
                        name = 'Developers'
                        email = 'developers@openremote.io'
                        organization = 'OpenRemote'
                        organizationUrl = 'https://openremote.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/openremote/openremote.git'
                    developerConnection = 'scm:git:ssh://github.com:openremote/openremote.git'
                    url = 'https://github.com/openremote/openremote/tree/master'
                }
            }
        }
    }

    repositories {
        maven {
            name = 'myRepo'
            url = layout.buildDirectory.dir("repo")
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.maven
}
